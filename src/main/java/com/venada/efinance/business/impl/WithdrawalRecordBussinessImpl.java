package com.venada.efinance.business.impl;import com.venada.efinance.business.*;import com.venada.efinance.common.exception.BusinessException;import com.venada.efinance.common.util.PaginationMore;import com.venada.efinance.enumtype.DealType;import com.venada.efinance.pojo.DealDetail;import com.venada.efinance.pojo.User;import com.venada.efinance.pojo.UserWallet;import com.venada.efinance.pojo.WithdrawalRecord;import com.venada.efinance.security.SpringSecurityUtil;import com.venada.efinance.service.WithdrawalRecordService;import com.venada.efinance.sms.SmsService;import com.venada.efinance.util.DateUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.math.BigDecimal;import java.util.*;@Servicepublic class WithdrawalRecordBussinessImpl implements WithdrawalRecordBussiness {	private static final Logger logger = LoggerFactory			.getLogger(WithdrawalRecordBussinessImpl.class);	@Autowired	private WithdrawalRecordService withdrawalRecordService;	@Autowired	private SmsService smsService;	@Autowired	private MessageRuleBusiness  messageRuleBusinessImpl;	@Autowired	private UserBusiness userBusiness;	@Autowired	private UserWalletBusiness userWalletBusinessImpl;	@Autowired	private DealDetailBusiness dealDetailBusinessImpl;	private int queryWithDrawalRecordCount(Map<String, Object> condition) {		return (Integer) withdrawalRecordService.getObject(				"queryWithDrawalRecordCount", condition);	}	@Override	public List<WithdrawalRecord> queryWithDrawalRecord(PaginationMore page,			Map<String, Object> condition) {		page.setTotalRows(queryWithDrawalRecordCount(condition));		page.repaginate();		return withdrawalRecordService.selectList("queryWithDrawalRecord",				condition, page);	}    /**     *     * @param serialNumber 订单号码     * @throws BusinessException     */	@Override	@Transactional(rollbackFor = { Exception.class, BusinessException.class })	public synchronized void setDealStatus(String serialNumber) throws BusinessException {        WithdrawalRecord withdrawalRecord = getWithDrawalRecordBySerialNumber(serialNumber);        if("2".equals(withdrawalRecord.getStatus())){            withdrawalRecordService.updateObject("setDealStatus",serialNumber);            Map<String,Object> conditions = new HashMap<String,Object>();            conditions.put("serialNumber", serialNumber);            List<WithdrawalRecord> list =  queryWithDrawalRecordByConditions(conditions);            if(list.size() > 0){                WithdrawalRecord w = list.get(0);                User user = userBusiness.findUserByMoblieNumber(w.getMobileNumber());                String mobileNumber = messageRuleBusinessImpl                        .getSendMobileNumber(user);                if (messageRuleBusinessImpl.isSend(user)) {                    smsService.sendSms(mobileNumber, "", "MB-2014022607",DateUtils.currentTime("yyyy-MM-dd"),String.valueOf(w.getAmount()),w.getCardNumber());                }            }        }	}		@Override	@Transactional(rollbackFor = { Exception.class, BusinessException.class })	public void setDealStatusFreeze(String serialNumber) throws BusinessException {		withdrawalRecordService.updateObject("setDealStatusFreeze",serialNumber);	}		@Override	@Transactional(rollbackFor = { Exception.class, BusinessException.class })	public void setDealStatusThaw(String serialNumber) throws BusinessException {		withdrawalRecordService.updateObject("setDealStatusThaw",serialNumber);	}	/*	 * (non-Javadoc)	 * 	 * @see com.venada.efinance.business.WithdrawalRecordBussiness#	 * queryWithDrawalRecordForApi(java.util.Map)	 */	@Override	public List<WithdrawalRecord> queryWithDrawalRecordForApi(			Map<String, Object> cond) throws BusinessException {		List<WithdrawalRecord> result = new ArrayList<WithdrawalRecord>();		try {			result = withdrawalRecordService.findObjects(					"queryWithdrawalForApi", cond);					} catch (Exception e) {			logger.error("手机端查询提现记录失败,失败原因:{}",e.getMessage());			throw new BusinessException("003");		}		return result;	}	@Override	public BigDecimal countTotalWithdrawalForSvip(String userid)			throws BusinessException {		return (BigDecimal) withdrawalRecordService.getObject("countTotalWithdrawalForSvip", userid);	}	@Override	public List<WithdrawalRecord> queryWithdrawalRecordForAndriod(			Map<String, Object> conditions) throws BusinessException {		return withdrawalRecordService.findObjects("queryWithdrawalRecordForAndriod", conditions);	}	private List<WithdrawalRecord> queryWithDrawalRecordByConditions(			Map<String, Object> conditions) throws BusinessException {		return withdrawalRecordService.findObjects("queryWithDrawalRecordByConditions", conditions);	}	@Override	public List<WithdrawalRecord> queryWithDrawalRecordForExport(			Map<String, Object> condition) {		return withdrawalRecordService.findObjects("queryWithDrawalRecord", condition);	}	@Override	@Transactional(rollbackFor = { Exception.class, BusinessException.class })	public void setDealStatusFail(String serialNumber) throws BusinessException {		withdrawalRecordService.updateObject("setDealStatusFail",serialNumber);		Map<String,Object> conditions = new HashMap<String,Object>();		conditions.put("serialNumber", serialNumber);		List<WithdrawalRecord> list =  queryWithDrawalRecordByConditions(conditions);		if(list.size() > 0 ) {			WithdrawalRecord w = list.get(0);			User user = userBusiness.findUserByMoblieNumber(w.getMobileNumber());			//更新钱包的钱			UserWallet userWallet = userWalletBusinessImpl.getUserWalletByUserId(user.getId());			userWallet.setAmount(w.getAmount().add(userWallet.getAmount()) );			userWallet.setModifyBy(SpringSecurityUtil.getCurrentUser().getId());			userWallet.setModifyTime(new Date());			userWalletBusinessImpl.updateUserWallet(userWallet);			//生成退账记录			DealDetail dealDetail = new DealDetail();			dealDetail.setId(String.valueOf(UUID.randomUUID()));			dealDetail.setDescription("提现失败的退款");			dealDetail.setDateTime(new Date());			dealDetail.setAmount(w.getAmount());			dealDetail.setSerialNumber(userWalletBusinessImpl.generateSerialNumber("C"));			dealDetail.setBalance(userWallet.getAmount());			dealDetail.setDealType(DealType.C.getIndex());			dealDetail.setType("1");			dealDetail.setStatus("0");			dealDetail.setUserId(user.getId());			dealDetailBusinessImpl.addDealDetail(dealDetail);						String mobileNumber = messageRuleBusinessImpl					.getSendMobileNumber(user);			if (messageRuleBusinessImpl.isSend(user)) {				smsService.sendSms(mobileNumber, "", "MB-2014070212",w.getSerialNumber());			}		}	}    private WithdrawalRecord getWithDrawalRecordBySerialNumber(String serialNumber){        return (WithdrawalRecord) withdrawalRecordService.getObject("getWithDrawalRecordBySerialNumber",serialNumber);    }}