package com.venada.efinance.controller;import com.venada.efinance.business.OrderBusiness;import com.venada.efinance.common.controller.BaseController;import com.venada.efinance.common.exception.BusinessException;import com.venada.efinance.common.util.PaginationMore;import com.venada.efinance.pojo.Order;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpServletRequest;import java.util.HashMap;import java.util.List;import java.util.Map;@Controller@RequestMapping(value = "/manager")public class OrderAdminController extends BaseController{	private static final Logger logger = LoggerFactory			.getLogger(OrderAdminController.class);	@Autowired	private OrderBusiness orderBusiness;		@RequestMapping(value="/orderList")	public String orderList(PaginationMore page, Model model,HttpServletRequest request){		try {			page.setPageSize(20);			Map<String, Object> condition = setMapCondition(request);						if(condition.get("orderStartTime") != null){				String orderStartTime = condition.get("orderStartTime").toString();				condition.put("orderStartTime", orderStartTime.concat(" 00:00:00"));			}			if(condition.get("orderEndTime") != null){				String orderEndTime = condition.get("orderEndTime").toString();				condition.put("orderEndTime", orderEndTime.concat(" 23:59:59"));			}						List<Order> orderList = orderBusiness.queryAllOrder(condition, page);			model.addAttribute("condition", condition);			model.addAttribute("page", page);			model.addAttribute("orderList", orderList);		} catch (BusinessException e) {			logger.info("orderList failure");		}		return "manager/orderList";	}	@RequestMapping(value="/showOrderDetail")	public String showOrderDetail(Model model,HttpServletRequest request,PaginationMore page){		Map<String,Object> condition = new HashMap<String, Object>();		int id = Integer.parseInt(request.getParameter("id"));		condition.put("id", id);		List<Order> orders = orderBusiness.queryAllOrder(condition, page);		model.addAttribute("order", orders.get(0));		return "manager/showOrderDetail";	}		@RequestMapping(value="/toUpdateOrder")	public String toUpdateOrder(Model model,HttpServletRequest request,PaginationMore page){		Map<String,Object> condition = new HashMap<String, Object>();		int id = Integer.parseInt(request.getParameter("id"));		condition.put("id", id);		List<Order> orders = orderBusiness.queryAllOrder(condition, page);		model.addAttribute("order", orders.get(0));		return "manager/showOrderDetailToMod";	}		@RequestMapping(value="/updateOrder")	@ResponseBody	public Object updateOrder(HttpServletRequest request){		int id = Integer.parseInt(request.getParameter("id"));		int dealStatus = Integer.parseInt(request.getParameter("dealStatus"));		String remark = request.getParameter("remark");		Map<String,Object> resMap = new HashMap<String, Object>();		Map<String,Object> params = new HashMap<String, Object>();		params.put("id", id);		params.put("dealStatus", dealStatus);		params.put("remark", remark);		orderBusiness.updateOrder(params);		resMap.put("resCode", 1);		return resMap;	}	@RequestMapping(value="/valiOrderId")	@ResponseBody	public Object vali(HttpServletRequest request){		String id = request.getParameter("id");		Map<String,Object> resultMap = new HashMap<String, Object>();		Order order = orderBusiness.queryOrderById(id);		if(order == null){			resultMap.put("resCode", 0);			resultMap.put("resMsg", "操作失败，该订单不存在！");		}else{			try {								if(order.getTradeStatus() == 2 ){					resultMap.put("resCode", 0);					resultMap.put("resMsg", "交易已经完成，订单不能取消！");				}if(order.getTradeStatus() == 3 ){					resultMap.put("resCode", 0);					resultMap.put("resMsg", "订单已经取消，不能重复取消！");				}if(order.getTradeStatus() == 4 ){					resultMap.put("resCode", 0);					resultMap.put("resMsg", "订单支付中，不能取消！");				}else{					order.setTradeStatus(3);					orderBusiness.updateOrderById(order);					resultMap.put("resCode", 1);					resultMap.put("resMsg", "操作成功！");				}							} catch (BusinessException e) {				logger.info("取消订单异常，更新数据库失败！");				resultMap.put("resCode", 0);				resultMap.put("resMsg", "取消订单异常，更新数据库失败！");			}		}		return resultMap;	}}