package com.venada.efinance.controller;import com.venada.efinance.business.ActivityBusiness;import com.venada.efinance.business.SystemConfigBusiness;import com.venada.efinance.common.controller.BaseController;import com.venada.efinance.common.util.PaginationMore;import com.venada.efinance.pojo.Activity;import com.venada.efinance.pojo.SystemConfig;import com.venada.efinance.pojo.User;import com.venada.efinance.security.SpringSecurityUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.multipart.MultipartHttpServletRequest;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.UUID;@Controllerpublic class ActivityController extends BaseController{	@Autowired	private SystemConfigBusiness systemConfigBusiness;	@Autowired	private ActivityBusiness activityBusiness;	private static final Logger logger = LoggerFactory.getLogger(ActivityController.class);	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");	SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd");			public String visitMallIndex(PaginationMore page,Model model,HttpServletRequest request){			//logger.info("用户访问活动页面访问");		User user = SpringSecurityUtil.getCurrentUser();		if(user != null){			model.addAttribute("user", user);		}		SystemConfig systemConfig = systemConfigBusiness.getSystemConfig("112");		if(systemConfig != null){			model.addAttribute("xnid", systemConfig.getParamValue());		}				Map<String,Object> map = new HashMap<String,Object>();		List<Activity> list = activityBusiness.queryActivityList(map);		model.addAttribute("list", list);		return ".activity";	}		@RequestMapping(value="activity.html")	public String newVisitMallIndex(PaginationMore page,Model model,HttpServletRequest request){			//logger.info("用户访问活动页面访问");		User user = SpringSecurityUtil.getCurrentUser();		if(user != null){			model.addAttribute("user", user);		}		SystemConfig systemConfig = systemConfigBusiness.getSystemConfig("112");		if(systemConfig != null){			model.addAttribute("xnid", systemConfig.getParamValue());		}				Map<String,Object> map = new HashMap<String,Object>();		List<Activity> list = activityBusiness.queryActivityList(map);		model.addAttribute("list", list);		return ".activity";	}			@RequestMapping(value = "/showActivity", method = RequestMethod.GET)	public String  showActivity(HttpServletRequest request,Model model) {		try {			Map<String, Object> map = new HashMap<String, Object>();			// 计算总共有多少页			int gamesCounts = activityBusiness.getActivityCounts(map);			int gamesPage = (gamesCounts / 3) + (gamesCounts % 3 > 0 ? 1 : 0);			model.addAttribute("gamesPage", gamesPage);			int page = 1;			try {				page = Integer.parseInt(request.getParameter("page"));			} catch (Exception e) {				logger.error("页数转换为数字失败：" + page);				page = 1;			}			if (page < 1) {				page = 1;			}			if (page > gamesPage && gamesCounts != 0) {				page = gamesPage;			}			map.put("limitCount", 3);			map.put("limitIndex", (page - 1) * 3);			List<Activity> gameList = activityBusiness.queryActivityList(map);			model.addAttribute("gamelist", gameList);			model.addAttribute("page", page);		} catch (Exception e) {			logger.error(e.getMessage());		}		return "activity/activityList";	}			@RequestMapping("/manager/adminActivityList")	public String adminActivityList(PaginationMore page,HttpServletRequest request,Model model) {				Map<String,Object> map = new HashMap<String,Object>();		List<Activity> list = activityBusiness.queryActivityList(map, page);		model.addAttribute("list", list);		model.addAttribute("page", page);		return "manager/adminActivityList";	}		@RequestMapping("/manager/adminActivityAdd")	public String adminActivityAdd(PaginationMore page,HttpServletRequest request,Model model) {		String id = request.getParameter("id");		if (id != null && !"".equals(id)) {			Activity activity = activityBusiness.getActivityById(id);					    model.addAttribute("activity", activity);		    model.addAttribute("starttime", sdf.format(activity.getStartTime()));		    model.addAttribute("endtime", sdf.format(activity.getEndTime()));		}				return "manager/adminActivityAdd";	}		@RequestMapping(value = "uploadActivityPic.do",method = RequestMethod.POST)	public @ResponseBody String uploadActivityPic(HttpServletRequest request,HttpServletResponse response) {		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;		Map<String, MultipartFile> fileMap = multipartRequest.getFileMap();				Activity activity = null;		String id = request.getParameter("id"); // 活动主键		if(!"".equals(id) && id != null){			activity = activityBusiness.getActivityById(id);		}else{			activity = new Activity();			activity.setId(UUID.randomUUID().toString());		}		try {			for (Map.Entry<String, MultipartFile> entity : fileMap.entrySet()) {				MultipartFile mf = entity.getValue();				activity.setPic(mf.getBytes());								if(!"".equals(id) && id != null){					activityBusiness.updateActivity(activity);				}else{					activityBusiness.addActivity(activity);				}							}					} catch (Exception e) {			logger.error(e.getMessage());		}		return activity.getId();	}		@RequestMapping("/showActivityPic")	public void showActivityPic(HttpServletRequest request,			HttpServletResponse response) throws Exception {			ServletOutputStream op = response.getOutputStream();			String id = request.getParameter("id");			if (!"".equals(id) && id != null) {				response.reset();				Activity activity = activityBusiness.getActivityById(id);				op.write(activity.getPic());			}			op.flush();			op.close();	}		@RequestMapping("/manager/adminActivityDealAdd")	public String adminActivityDealAdd(PaginationMore page,HttpServletRequest request,Model model) throws ParseException {		String id = request.getParameter("square");		String name = request.getParameter("name");		String descrip = request.getParameter("descrip");		String startTime = request.getParameter("actionStartTime");		String endTime = request.getParameter("actionEndTime");		String url = request.getParameter("url");			Activity activity = new Activity();		if (id != null && !"".equals(id)) {			activity = activityBusiness.getActivityById(id);		} else {			activity.setId(UUID.randomUUID().toString());		}		activity.setName(name);		activity.setDescrip(descrip);		activity.setUrl(url);		try {			activity.setStartTime(sdf.parse(startTime));		} catch (Exception e) {			activity.setStartTime(sdf2.parse(startTime));			logger.error("时间转换失败：开始时间"+startTime+"--结束时间"+endTime);					}				try {			activity.setEndTime(sdf.parse(endTime));		} catch (Exception e) {			activity.setEndTime(sdf2.parse(endTime));			logger.error("时间转换失败：开始时间"+startTime+"--结束时间"+endTime);		}						// 判断新增还是更新		if (id != null && !"".equals(id)) {			activityBusiness.updateActivity(activity);		} else {			activityBusiness.addActivity(activity);		}		// 跳转页面		return adminActivityList(page, request, model);	}			/**	 * 后台游戏删除	 */	@RequestMapping("/manager/adminActivityDel")	public String adminActivityDel(PaginationMore page,			HttpServletRequest request,Model model) {		String ids = request.getParameter("ids");		if (ids != null && !"".equals(ids)) {			String[] id = ids.split(",");			    for (int i = 0; i < id.length; i++) {									activityBusiness.delActivity(id[i]);									}			    				}		return adminActivityList(page, request, model);			}	}