package com.venada.efinance.controller;//import beartool.MD5;import com.venada.efinance.business.*;import com.venada.efinance.common.controller.BaseController;import com.venada.efinance.common.exception.BusinessException;import com.venada.efinance.common.util.PaginationMore;import com.venada.efinance.enumtype.LogTypeEnum;import com.venada.efinance.pojo.*;import com.venada.efinance.security.SpringSecurityUtil;import com.venada.efinance.util.SystemUtils;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.encoding.Md5PasswordEncoder;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.*;@Controllerpublic class UserController extends BaseController {	private static final Logger logger = LoggerFactory			.getLogger(UserController.class);	@Autowired	private ProjectInvestBusiness projectInvestBusiness;	@Autowired	private UserBusiness userBusiness;	@Autowired	private UserDetailBusiness userDetailBusiness;	@Autowired	private ProvinceBusiness provinceBusiness;	@Autowired	private CityBusiness cityBusiness;	@Autowired	private AreaBusiness areaBusiness;	@Autowired	private BankCardBusiness bankCardBusiness;	@Autowired	private UserWalletBusiness userWalletBusiness;	@Autowired	private SecurityCenterBusiness securityCenterBusiness;	@Autowired	private Md5PasswordEncoder md5PasswordEncoder;	@Autowired	private SecurityQuestionBusiness securityQuestionBusiness;	@Autowired	private SystemConfigBusiness systemConfigBusiness;	@Autowired	private GameBusiness gameBusiness;	@Autowired	private MessageRuleBusiness messageRuleBusinessImpl;	@Autowired	private OperationLogBusiness opeartionLogBusiness;		@RequestMapping(value = "/user/manager/userDetail", method = {			RequestMethod.GET, RequestMethod.POST })	public String toUserDetail(Model model) {		User user = SpringSecurityUtil.getCurrentUser();		user = userBusiness.findUserById(user.getId());		UserDetail userDetail = userDetailBusiness				.findUserDetailByMoblieNumber(user.getMobileNumber());		model.addAttribute("user", user);		model.addAttribute("userDetail", userDetail);		// 加载全国省份		List<Province> provinces = provinceBusiness.findAllProvinceList();		model.addAttribute("liveProvince", provinces);		// 判断用户是否填写了居住地省份，如果有，加载同一省份下的其他城市		if (userDetail.getLiveProvince() > 0) {			List<City> cities = cityBusiness					.findCityListByProvinceid(userDetail.getLiveProvince());			model.addAttribute("liveCity", cities);		}		// 判断用户是否填写了居住地城市，如果有，加载同一城市下的其他区县		if (userDetail.getLiveCity() > 0) {			List<Area> areas = areaBusiness.findAreaListByCityid(userDetail					.getLiveCity());			model.addAttribute("liveArea", areas);		}        model.addAttribute("item", 1);		return ".newUserDetail";	}	@RequestMapping(value = "/user/manager/bindCard", method = {			RequestMethod.GET, RequestMethod.POST })	public String toUserBindCard(Model model) {		User user = SpringSecurityUtil.getCurrentUser();		User _user = userBusiness				.findUserByMoblieNumber(user.getMobileNumber());		if (_user.getName() != null				&& !"".equals(_user.getName().replaceAll("\\s*", ""))) {			model.addAttribute("name", _user.getName());		}		// 查询银行卡绑定信息		List<BankCard> bankCards = bankCardBusiness				.getAllByUserId(user.getId());		model.addAttribute("bankCards", bankCards);		// 加载全国省份		List<Province> provinces = provinceBusiness.findAllProvinceList();		model.addAttribute("bankProvince", provinces);        model.addAttribute("item", 1);		return ".newBindCard";	}	@RequestMapping(value = "/user/2/manager/photoUpload", method = {			RequestMethod.GET, RequestMethod.POST })	public String toUserPhotoUpload(Model model, HttpServletRequest request) {		return "user/photoUpload";	}	@RequestMapping(value = "/user/manager/resetPassword", method = {			RequestMethod.GET, RequestMethod.POST })	public String toUserResetPassword(Model model) {		model.addAttribute("item",1);        return ".newResetPassword";	}		@RequestMapping(value = "/user/manager/setMessageRule", method = {			RequestMethod.GET, RequestMethod.POST })	public Object setMessageRule(Model model) {		User user=SpringSecurityUtil.getCurrentUser();		String mobileNumber=user.getMobileNumber();		String startTime="0";		String endTime="0";		Integer switchTag=0;		List<MessageRule> messageruleList=messageRuleBusinessImpl.findMessageRule(user.getId());		if(messageruleList.isEmpty()){			SecurityCenter securityCenter= securityCenterBusiness.getSecurityCenterByUserId(user.getId());			if (securityCenter != null) {				if (securityCenter.getMobile() != null						&& !securityCenter.getMobile().equals("")) {					mobileNumber = securityCenter.getMobile();				}			}		}else{			MessageRule messageRule=messageruleList.get(0);			mobileNumber=messageRule.getMobileNumber();			startTime=messageRule.getStartTime();			endTime=messageRule.getEndTime();			switchTag=messageRule.getSwitchTag();		}		model.addAttribute("mobileNumber",mobileNumber);		model.addAttribute("startTime",startTime);		model.addAttribute("endTime",endTime);		model.addAttribute("switchTag",switchTag);				return ".setMessageRule";	}	@ResponseBody	@RequestMapping(value = "/user/manager/getCityJson", method = { RequestMethod.GET, RequestMethod.POST })	public Object getCityJson(HttpServletRequest request,			HttpServletResponse response) {		List<City> cities = null;		try {			cities = cityBusiness.findCityListByProvinceid(Integer					.parseInt(request.getParameter("provinceid")));		} catch (NumberFormatException e) {			logger.error(e.getMessage());		}		return cities;	}	@ResponseBody	@RequestMapping(value = "/user/manager/getAreaJson", method = {			RequestMethod.GET, RequestMethod.POST })	public Object getAreaJson(HttpServletRequest request,			HttpServletResponse response) {		List<Area> area = null;		try {			area = areaBusiness.findAreaListByCityid(Integer.parseInt(request					.getParameter("cityid")));		} catch (NumberFormatException e) {			logger.error(e.getMessage());		}		return area;	}		@ResponseBody	@RequestMapping(value="/isMember.html" )	public Object isMember(HttpServletRequest request,			HttpServletResponse response) {		try{			User user = SpringSecurityUtil.getCurrentUser();			if(user == null){				return "3";  //3代表未登录			}			String id = request.getParameter("id");			Game game = gameBusiness.getGameDetail(id);			if (!securityCenterBusiness.isOpen(user.getId()) && game.getIsMember() == 1) {						return "0";    //0代表不能领取任务			}else{				return "1";    //1代表能顺利领取任务			}		}catch(Exception e){			logger.error(e.getMessage());			return "0";     		}		}		@RequestMapping(value = "/user/manager/updateUserDetail")	@ResponseBody	public Object complementUserDetail(HttpServletRequest request) {				Map<String, Object> resultMap = new HashMap<String, Object>();		try {			User user = SpringSecurityUtil.getCurrentUser();						user = userBusiness.findUserById(user.getId());						UserDetail userDetail = userDetailBusiness					.findUserDetailByMoblieNumber(user.getMobileNumber());						logger.info(user.getMobileNumber() + "开始修改个人资料，当前对象状态："+user+userDetail);						// 昵称			String nickName = request.getParameter("nickName");			if (nickName != null && !"".equals(nickName.replaceAll("\\s*", ""))) {				Map<String,Object> condition = new HashMap<String,Object>();								nickName = nickName.replaceAll("\\s*", "");				condition.put("nickName", nickName);				condition.put("userid", user.getId());				if(userBusiness.findUserByNickName(condition) > 0){					resultMap.put("resCode", 0);                    resultMap.put("tip_id","nickNameErr");					resultMap.put("resMsg", "该昵称已被使用，请换一个昵称！");					return resultMap;				}else{					user.setNickName(nickName);				}			} else {				resultMap.put("resCode", 0);                resultMap.put("tip_id","nickNameErr");				resultMap.put("resMsg", "昵称不能为空！");				return resultMap;			}						// 姓名			String name = user.getName();			if (name == null || "".equals(name.replaceAll("\\s*", ""))) {				name = request.getParameter("name");				if (name != null && !"".equals(name.replaceAll("\\s*", ""))) {					name = name.replaceAll("\\s*", "");					if (!SystemUtils.checkName(name)) {						resultMap.put("resCode", 0);                        resultMap.put("tip_id","nameErr");						resultMap.put("resMsg", "姓名只能包含下划线、字母、数字、汉字！");						return resultMap;					} else if (name.length() > 40) {						resultMap.put("resCode", 0);                        resultMap.put("tip_id","nameErr");						resultMap.put("resMsg", "姓名不能多于40个字符！");						return resultMap;					}					user.setName(name);				} else {					resultMap.put("resCode", 0);                    resultMap.put("tip_id","nameErr");					resultMap.put("resMsg",							"姓名为必填项，为了避免给您带来不必要的麻烦，请务必填写您的真实姓名！");					return resultMap;				}			}			// qq			String qq = request.getParameter("qq");			if (qq != null && !"".equals(qq.replaceAll("\\s*", ""))) {				userDetail.setQq(qq.replaceAll("\\s*", ""));			}			// 电子邮箱			String email = request.getParameter("email");			if (email != null && !"".equals(email.replaceAll("\\s*", ""))) {				if (SystemUtils.emailValidate(email.replaceAll("\\s*", ""))) {					userDetail.setEmail(email.replaceAll("\\s*", ""));				} else {					resultMap.put("resCode", 0);                    resultMap.put("tip_id","emailErr");					resultMap.put("resMsg", "电子邮箱地址不正确！");					return resultMap;				}			}			// 性别			String gender = request.getParameter("gender");			if (gender != null) {				gender = gender.replaceAll("\\s*", "");				if (!"".equals(gender)) {					userDetail.setGender(Integer.parseInt(gender));				}			}			String isMarried = request.getParameter("isMarried");			if (isMarried != null) {				isMarried = isMarried.replaceAll("\\s*", "");				if (!"".equals(isMarried)) {					userDetail.setIsMarried(Integer.parseInt(isMarried));				}			}			String idCard = request.getParameter("idCard");			if (idCard != null && !"".equals(idCard.replaceAll("\\s*", ""))) {				idCard = idCard.replaceAll("\\s*", "");				if (idCard.length() > 0						&& (idCard.length() == 15 || idCard.length() == 18)) {					userDetail.setIdCard(idCard);				} else {					resultMap.put("resCode", 0);                    resultMap.put("tip_id","idCardErr");					resultMap.put("resMsg", "身份证号码格式不正确！");					return resultMap;				}			} else {				resultMap.put("resCode", 0);                resultMap.put("tip_id","idCardErr");				resultMap.put("resMsg", "身份证号码不能为空！");				return resultMap;			}			String birthday = request.getParameter("birthday");			if (birthday != null) {				birthday = birthday.replaceAll("\\s*", "");				if (!"".equals(birthday)) {					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");					userDetail.setBirthday(new java.sql.Date(sdf							.parse(birthday).getTime()));				}			}			String liveProvince = request.getParameter("liveProvince");			if (liveProvince != null) {				liveProvince = liveProvince.replaceAll("\\s*", "");				if (liveProvince.length() == 6) {					userDetail.setLiveProvince(Integer.parseInt(liveProvince));				} else {					resultMap.put("resCode", 0);                    resultMap.put("tip_id","addressErr");					resultMap.put("resMsg", "请选择居住省份！");					return resultMap;				}			} else {				resultMap.put("resCode", 0);                resultMap.put("tip_id","addressErr");				resultMap.put("resMsg", "请选择居住省份！");				return resultMap;			}			String liveCity = request.getParameter("liveCity");			if (liveCity != null) {				liveCity = liveCity.replaceAll("\\s*", "");				if (liveCity.length() == 6) {					userDetail.setLiveCity(Integer.parseInt(liveCity));				} else {					resultMap.put("resCode", 0);                    resultMap.put("tip_id","addressErr");					resultMap.put("resMsg", "请选择居住城市！");					return resultMap;				}			} else {				resultMap.put("resCode", 0);                resultMap.put("tip_id","addressErr");				resultMap.put("resMsg", "请选择居住城市！");				return resultMap;			}			String liveArea = request.getParameter("liveArea");			if (liveArea != null) {				liveArea = liveArea.replaceAll("\\s*", "");				if (liveArea.length() == 6) {					userDetail.setLiveArea(Integer.parseInt(liveArea));				} else {					resultMap.put("resCode", 0);                    resultMap.put("tip_id","addressErr");					resultMap.put("resMsg", "请选择居住区县！");					return resultMap;				}			} else {				resultMap.put("resCode", 0);                resultMap.put("tip_id","addressErr");				resultMap.put("resMsg", "请选择居住区县！");				return resultMap;			}			String address = request.getParameter("address");			if (address != null && !"".equals(address.replaceAll("\\s*", ""))) {				userDetail.setAddress(address);			} else {				resultMap.put("resCode", 0);                resultMap.put("tip_id","addressErr");				resultMap.put("resMsg", "请填写详细地址！");				return resultMap;			}			String eduLevel = request.getParameter("eduLevel");			if (eduLevel != null) {				eduLevel = eduLevel.replaceAll("\\s*", "");				if (eduLevel.length() > 0) {					userDetail.setEduLevel(Integer.parseInt(eduLevel));				}			}			String graduated = request.getParameter("graduated");			if (graduated != null) {				graduated = graduated.replaceAll("\\s*", "");				if (!"".equals(graduated)) {					userDetail.setGraduated(graduated);				}			}			String profession = request.getParameter("profession");			if (profession != null) {				profession = profession.replaceAll("\\s*", "");				if (!"".equals(profession)) {					userDetail.setProfession(profession);				}			}			String incomeScope = request.getParameter("incomeScope");			if (incomeScope != null) {				incomeScope = incomeScope.replaceAll("\\s*", "");				if (!"".equals(incomeScope)) {					userDetail.setIncomeScope(incomeScope);				}			}			userDetail.setModifyTime(new java.sql.Date(System					.currentTimeMillis()));			logger.info(user.getMobileNumber() + "设置后用户对象的状态："+user+userDetail);			userBusiness.complementUserDetail(user, userDetail);		} catch (Exception e) {			logger.error(e.getMessage());			resultMap.put("resCode", 2);			resultMap.put("resMsg", "操作失败，请重试！");			return resultMap;		}		resultMap.put("resCode", 1);		resultMap.put("resMsg", "操作成功！");		return resultMap;	}    @RequestMapping(value = "/user/manager/dealResetPassword", method = RequestMethod.POST)    @ResponseBody    public Object resetPassWord(HttpServletRequest request) {        String oldPwd = request.getParameter("oldPwd");        String newPwd = request.getParameter("newPwd");        String newPwdRepeat = request.getParameter("newPwdRepeat");        Map<String, String> resultMap = new HashMap<String, String>();        try {            if (oldPwd == null || "".equals(oldPwd.replaceAll("\\s*", ""))) {                resultMap.put("code", "f");                resultMap.put("tip_id" , "oldPwdErr");                resultMap.put("msg", "请输入原密码！");                return resultMap;            } else {                oldPwd = oldPwd.replaceAll("\\s*", "");            }            if (newPwd == null || "".equals(newPwd.replaceAll("\\s*", ""))) {                resultMap.put("code", "f");                resultMap.put("tip_id" , "newPwdErr");                resultMap.put("msg", "请输入新密码！");                return resultMap;            } else {                newPwd = newPwd.replaceAll("\\s*", "");                if (!SystemUtils.checkPassword(newPwd)) {                    resultMap.put("code", "f");                    resultMap.put("tip_id","newPwdErr");                    resultMap.put("msg", "新密码不符合要求，密码长度为8～20位,且必须包含数字、字母！");                    return resultMap;                }            }            if (newPwdRepeat == null                    || "".equals(newPwdRepeat.replaceAll("\\s*", ""))) {                resultMap.put("code", "f");                resultMap.put("tip_id","newPwdRepeatErr");                resultMap.put("msg", "请输入确认密码！");                return resultMap;            } else {                newPwdRepeat = newPwdRepeat.replaceAll("\\s*", "");            }            if (newPwd.equals(newPwdRepeat)) {                oldPwd = md5PasswordEncoder.encodePassword(oldPwd, "");                User u = SpringSecurityUtil.getCurrentUser();                if (oldPwd.equalsIgnoreCase(u.getPassword())) {                    userBusiness.updateUserPassword(u.getId(),                            md5PasswordEncoder.encodePassword(newPwd, ""));                    // 修改成功后，清空用户session,强制重新登录                    resultMap.put("code", "s");                    resultMap.put("msg", "密码修改成功,请重新登录！");                    return resultMap;                } else {                    resultMap.put("code", "f");                    resultMap.put("tip_id" , "oldPwdErr");                    resultMap.put("msg", "原密码输入错误！");                    return resultMap;                }            } else {                resultMap.put("code", "f");                resultMap.put("tip_id" , "newPwdErr");                resultMap.put("msg", "2次输入不一致，请重新输入！");                return resultMap;            }        } catch (BusinessException e) {            logger.error(e.getMessage());        }        return resultMap;    }		@RequestMapping(value = "/user/manager/saveOrUpdateMessageRule", method = RequestMethod.POST)	@ResponseBody	public Object saveOrUpdateMessageRule(HttpServletRequest request,			HttpServletResponse response, Model model) {		Map<String,Object> result=new HashMap<String,Object>();		String userid=SpringSecurityUtil.getCurrentUser().getId();		String startTime = request.getParameter("startTime");		String endTime = request.getParameter("endTime");		String mobileNumber = request.getParameter("mobileNumber");		String switchTag=request.getParameter("switchTag");		MessageRule messageRule=new MessageRule();		messageRule.setCreatetime(new Date());		messageRule.setEndTime(endTime);		messageRule.setMobileNumber(mobileNumber);		messageRule.setStartTime(startTime);		messageRule.setUserid(userid);		messageRule.setId(UUID.randomUUID().toString());		messageRule.setSwitchTag(Integer.parseInt(switchTag));		try {			List<MessageRule> messageRuleList=messageRuleBusinessImpl.findMessageRule(userid);			if (messageRuleList.isEmpty()) {				messageRuleBusinessImpl.addMessageRule(messageRule);				OperationLog log = new OperationLog();				log.setLogType(LogTypeEnum.MessageRule.getIndex());				log.setDataOld("");				log.setDataNew("新增短信接受配置:startTime:"+startTime+",endTime:"+endTime+",mobileNumber:"+mobileNumber+",switchTag:"+switchTag);				opeartionLogBusiness.addOperationLog(log);				result.put("code", "0");				result.put("msg", "保存成功");			}else{				OperationLog log = new OperationLog();				messageRule=messageRuleList.get(0);				log.setDataOld("startTime:"+messageRule.getStartTime()+",endTime:"+messageRule.getEndTime()+",mobileNumber:"+messageRule.getMobileNumber()+",switchTag:"+messageRule.getSwitchTag());				messageRule.setEndTime(endTime);				messageRule.setMobileNumber(mobileNumber);				messageRule.setStartTime(startTime);				messageRule.setCreatetime(new Date());				messageRule.setSwitchTag(Integer.parseInt(switchTag));				messageRuleBusinessImpl.updateMessageRuleById(messageRule);				log.setLogType(LogTypeEnum.MessageRule.getIndex());								log.setDataNew("修改短信接受配置:startTime:"+messageRule.getStartTime()+",endTime:"+messageRule.getEndTime()+",mobileNumber:"+messageRule.getMobileNumber()+",switchTag:"+messageRule.getSwitchTag());				opeartionLogBusiness.addOperationLog(log);				result.put("code", "0");				result.put("msg", "更新成功");			}		} catch (BusinessException e) {			result.put("code", "1");			result.put("msg", "操作失败");			logger.error(e.getMessage());		}		return result;	}	/**	 * 查看当前用户的短信配置	 * @return	 */	@RequestMapping(value = "/user/manager/queryMessageRule", method = RequestMethod.POST)	@ResponseBody	public Map<String,Object> queryMessageRule(){		Map<String,Object> result=new HashMap<String,Object>();		User user=SpringSecurityUtil.getCurrentUser();		List<MessageRule> messageRuleList=messageRuleBusinessImpl.findMessageRule(user.getId());		int count=messageRuleList.size();		String startTime="0";		String endTime="24";		if(count>0){			startTime=messageRuleList.get(0).getStartTime();			endTime=messageRuleList.get(0).getEndTime();		}		result.put("count", count);		result.put("startTime", startTime);		result.put("endTime", endTime);		return result;	}//	@RequestMapping(value = "/user/{index}/manager", method = RequestMethod.GET)//	public String toUserManager(@PathVariable String index, Model model) {//		model.addAttribute("index", index);//		model.addAttribute("user", SpringSecurityUtil.getCurrentUser());//		return ".userManager";//	}	@RequestMapping(value = "/user/security/center", method = {RequestMethod.POST,RequestMethod.GET})	public String toSecurityCenter(Model model) {		try {			User user = SpringSecurityUtil.getCurrentUser();			if (!securityCenterBusiness.isOpen(user.getId())) {				SystemConfig systemConfig = systemConfigBusiness						.getSystemConfig("104");				model.addAttribute("month_cost", systemConfig.getParamValue());				model.addAttribute("isvip", "false");			} else {				SecurityCenter securityCenter = securityCenterBusiness						.getSecurityCenterByUserId(user.getId());				if (securityCenter != null) {					model.addAttribute("securityCenter", securityCenter);					int count = 0;					if (StringUtils.isEmpty(securityCenter.getPassword())) {						count++;					}					if (StringUtils.isEmpty(securityCenter.getAnswer())) {						count++;					}					if (StringUtils.isEmpty(securityCenter.getMobile())) {						count++;					}					if (StringUtils.isEmpty(securityCenter.getMail())) {						count++;					}					model.addAttribute("count", count);					model.addAttribute("percent", (4 - count) * 100 / 4);				}				// 查询系统设置的问题集合				List<SecurityQuestion> securityQuestions = securityQuestionBusiness						.getAll();				model.addAttribute("securityQuestions", securityQuestions);				model.addAttribute("isvip", "true");			}		} catch (Exception e) {			logger.error(e.getMessage());		}		return ".newsecurityCenter";	}	/**	 * 用户开启安全中心	 * 	 * @return	 */	@RequestMapping(value = "/user/security/center/open", method = RequestMethod.POST)	@ResponseBody	public Object openSecurityCenter(int isAutoRenew) {		Map<String, String> map = null;		try {			map = securityCenterBusiness.openSecurityCenter(isAutoRenew);		} catch (Exception e) {			logger.error(e.getMessage());		}		return map;	}	/**	 * 用户开启安全中心	 * 	 * @return	 */	@RequestMapping(value = "/user/security/center/set", method = RequestMethod.POST)	@ResponseBody	public Object setSecurityCenter(SecurityCenter securityCenter) {		try {			securityCenterBusiness.updateSecurityCenter(securityCenter);		} catch (Exception e) {			logger.error(e.getMessage());		}		return "0";	}		@RequestMapping(value = "/user/security/center/set/checkPassword", method = RequestMethod.POST)	@ResponseBody	public Object checkPassword(HttpServletRequest request) {		String password = request.getParameter("password");		String oldPassword = request.getParameter("oldPassword");		if(password == null){			return "0";		}		if(!SystemUtils.checkPassword(password)){			return "0";		}				User user = SpringSecurityUtil.getCurrentUser();		user = userBusiness.findUserById(user.getId());				if(md5PasswordEncoder.encodePassword(password, null).equalsIgnoreCase(user.getPassword())){			return "2";		}		SecurityCenter securityCenter = securityCenterBusiness.getSecurityCenterByUserId(user.getId());		if(securityCenter != null){			if(securityCenter.getPassword() != null){				if(!securityCenter.getPassword().equalsIgnoreCase(md5PasswordEncoder.encodePassword(oldPassword, null))){					return "3";				}			}		}				return "1";	}	/**	 * 根据手机号码，验证用户是否存在	 * 	 * @param mobileNumber	 *            手机号码	 * @return	 */	@RequestMapping(value = "/{mobileNumber}/user", method = RequestMethod.POST)	@ResponseBody	public Object findUserByMobile(@PathVariable String mobileNumber) {		try {			User user = userBusiness.findUserByMoblieNumber(mobileNumber);			if (user != null) {				return 0;			}		} catch (Exception e) {			logger.error(e.getMessage());		}		return -1;	}	/**	 * 计算用户等级、钱包余额、收入	 */	@RequestMapping(value = "/user/reCount", method = RequestMethod.POST)	@ResponseBody	public Object reCount() {		Map<String, Object> resultMap = new HashMap<String, Object>();		User user = SpringSecurityUtil.getCurrentUser();		BigDecimal walletAmount = new BigDecimal(0);		if (userWalletBusiness.getAmountByUserId(user.getId()) != null) {			walletAmount = userWalletBusiness.getAmountByUserId(user.getId())					.getAmount();		}		resultMap.put("WALLETAMOUNT", walletAmount);		return resultMap;	}	@RequestMapping(value = "/user/manager/feedBack", method = {			RequestMethod.GET, RequestMethod.POST })	public String feedBack() {		return "user/feedBack";	}	@RequestMapping(value = "build.html")	public String build() {		return ".build";	}		@RequestMapping(value="/user/project/manager")	public String myProject(Model model,PaginationMore page){		page.setPageSize(20);		User user = SpringSecurityUtil.getCurrentUser();		Map<String,Object> conditions = new HashMap<String,Object>();		conditions.put("userid", user.getId());		model.addAttribute("res", projectInvestBusiness.getSupportLog(conditions,page));		model.addAttribute("page", page);		return ".myProject";	}		@RequestMapping(value="/checkNickNameUnique")	public @ResponseBody Object checkNickNameUnique(HttpServletRequest request){		Map<String,Object> resMap = new HashMap<String,Object>();		resMap.put("resCode", 0);		String nickName = request.getParameter("nickName");		if(nickName != null && !"".equals(nickName.replaceAll("\\s*", ""))){			nickName = nickName.replaceAll("\\s*", "");			Map<String,Object> condition = new HashMap<String,Object>();			condition.put("nickName", nickName);			condition.put("userid", SpringSecurityUtil.getCurrentUser().getId());			if(userBusiness.findUserByNickName(condition) > 0){				resMap.put("resCode", 1);				resMap.put("resMsg", "该昵称已被使用，请换一个昵称！");			}		}		return resMap;	}		@RequestMapping("/manager/cashUserList")	public String cashUser(PaginationMore page,HttpServletRequest request,Model model){		Map<String,Object> condition = new HashMap<String,Object>();		String status = request.getParameter("status");		String userId = request.getParameter("userId");		String actionStartTime = request.getParameter("actionStartTime");		String actionEndTime = request.getParameter("actionEndTime");		if(!"".equals(actionStartTime) && actionStartTime != null ){		condition.put("actionStartTime",actionStartTime+" 00:00:00");		}		if(!"".equals(actionEndTime) && actionEndTime != null ){			condition.put("actionEndTime",actionEndTime+" 23:59:59");			}				condition.put("status",status);		condition.put("userId",userId);				model.addAttribute("actionStartTime", actionStartTime);		model.addAttribute("actionEndTime", actionEndTime);		model.addAttribute("status", status);		model.addAttribute("userId", userId);		page.setPageSize(10);		List<User> list = userBusiness.queryCashUserList(condition, page);	//	List<UserGameRelation> list = gameBusiness.queryAllGameTaskDetailsOptimize(condition, page);	//	List<UserGameRelation> list = gameBusiness.queryAllGameTaskDetails(condition, page);		model.addAttribute("list", list);		model.addAttribute("page", page);		return "manager/cashUserList";	}		@RequestMapping(value={"banksearch"})	public String bankSearch(){		return "bankSearch";	}	/*	@RequestMapping(value={"doSearch.html"})	public @ResponseBody String doSearch(HttpServletRequest request){		String v_mid = "22843974";//商户号		String v_oid = request.getParameter("v_oid");//订单号		String v_url = "http://www.wowpower.cn/notifyPay/chinabank.html";//接收返回的url地址		String key="venadaroot%$#@!";//key是指商户的密钥		String text = v_oid+key;		MD5 md=new MD5();		String billNo_md5 = md.getMD5ofStr(text);				StringBuilder sbr=new StringBuilder("");        sbr.append("<form action=\"https://pay3.chinabank.com.cn/receiveorder.jsp\" method=\"POST\" >")           .append("<input type=\"hidden\" name=\"v_mid\" ").append("value=\"").append(v_mid).append("\">")           .append("<input type=\"hidden\" name=\"v_oid\" ").append("value=\"").append(v_oid).append("\">")           .append("<input type=\"hidden\" name=\"v_url\" ").append("value=\"").append(v_url).append("\">")           .append("<input type=\"hidden\" name=\"billNo_md5\" ").append("value=\"").append(billNo_md5).append("\">")           .append("</form>");		return sbr.toString();	}*/}