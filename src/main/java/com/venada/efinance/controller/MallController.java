package com.venada.efinance.controller;import com.venada.efinance.business.*;import com.venada.efinance.common.controller.BaseController;import com.venada.efinance.common.exception.BusinessException;import com.venada.efinance.common.util.PaginationMore;import com.venada.efinance.pojo.*;import com.venada.efinance.security.SpringSecurityUtil;import com.venada.efinance.util.SystemUtils;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpServletRequest;import java.util.HashMap;import java.util.List;import java.util.Map;@Controllerpublic class MallController extends BaseController{	private static final Logger logger = LoggerFactory.getLogger(MallController.class);	@Autowired	private CommodityBusiness commodityBusiness;	@Autowired	private UserBusiness userBusiness;	@Autowired	private UserConvertCreditsBusiness userConvertCreditsBusiness;	@Autowired	private AdvertisingBusiness advertisingBusiness;	@Autowired	private UserDetailBusiness userDetailBusiness;		@Autowired	private CommoditiesConfigBussiness commoditiesConfigBussiness;    @RequestMapping(value="/mall.html")    public String visitMallIndex(PaginationMore page,Model model,HttpServletRequest request){        Map<String, Object> condition = setMapCondition(request);        page.setPageSize(8);        if(!condition.containsKey("category")){            condition.put("category", "1");        }        if(condition.containsKey("integralScope")){            String integralScope = condition.get("integralScope").toString();            CommoditiesConfig commoditiesConfig = commoditiesConfigBussiness.getCommoditiesConfigById(Integer.parseInt(integralScope));            if(commoditiesConfig != null){                if(commoditiesConfig.getMaxIntegral() > 0){                    condition.put("maxIntegral", commoditiesConfig.getMaxIntegral());                }                if(commoditiesConfig.getMinIntegral() > 0){                    condition.put("minIntegral", commoditiesConfig.getMinIntegral());                }            }        }else{            condition.put("integralScope", 0);        }        List<CommodityCategory> commodityCategories = commodityBusiness.getAllCommodityCategory();        page.setTotalRows(commodityBusiness.getCommodityCounts(condition));        page.repaginate();        List<Commodity> commodities = commodityBusiness.queryCommodity(condition, page);        List<CommoditiesConfig> commoditiesConfigs = commoditiesConfigBussiness.getCommoditiesConfig(null);        model.addAttribute("commoditiesConfigs", commoditiesConfigs);        model.addAttribute("commodityCategories", commodityCategories);        model.addAttribute("commodities", commodities);        model.addAttribute("page", page);        model.addAttribute("condition", condition);        return ".mall";    }	@RequestMapping(value="/{id}/mallDetail.html")	public String detail(@PathVariable String id,Model model){		User user =SpringSecurityUtil.getCurrentUser();		Commodity commodity = commodityBusiness.getCommodity(id);		if(commodity!=null){			CommodityCategory commodityCategory=commodityBusiness.getCommodityCategory(commodity.getCategory());			model.addAttribute("commodityCategory", commodityCategory);			model.addAttribute("user", user);		}		model.addAttribute("commodity", commodity);		Map<String, Object> condition = new HashMap<String, Object>();		condition.put("commodityId", commodity.getId());		// 商品图片		List<CommodityPic> list = commodityBusiness.queryCommodityPics(condition);		model.addAttribute("list", list);		return ".mallDetail";	}		@RequestMapping(value="/mall/exchange")	@ResponseBody	public Object exchange(Commodity commodity,String mobilePhone){		Map<String,Object> resultMap = new HashMap<String, Object>();		if(!StringUtils.isNumeric(commodity.getCount())){			resultMap.put("resCode", 0);			resultMap.put("resMsg","兑换数量必须为数字！");			return resultMap;		}				User user = SpringSecurityUtil.getCurrentUser();		if(user == null){			resultMap.put("resCode", 2);			return resultMap;		}else{			user = userBusiness.findUserById(user.getId());			UserDetail userDetail = userDetailBusiness.findUserDetailByMoblieNumber(user.getMobileNumber());			if(user.getName() == null || userDetail.getIdCard() == null || userDetail.getLiveProvince() == 0 || userDetail.getLiveCity() ==0 || userDetail.getLiveArea() ==0 || userDetail.getAddress() == null){				resultMap.put("resCode", 3);				resultMap.put("resMsg","请先补全个人资料！！");				return resultMap;			}		}		int resCode = 0;		try {            resCode = userConvertCreditsBusiness.exchange(user, commodity,mobilePhone);            if(resCode == 1){                resultMap.put("resCode", 0);                resultMap.put("resMsg","您兑换商品的数量超过了库存量！");                return resultMap;            }else if(resCode == 2){                resultMap.put("resCode", 0);                resultMap.put("resMsg","您当前积分不够兑换所选商品！");                return resultMap;            }		} catch (NumberFormatException e) {			logger.error("积分兑换失败，请重试！" + e.getMessage());			resultMap.put("resCode", 0);			resultMap.put("resMsg","兑换失败，请重试！");			return resultMap;		} catch (BusinessException e) {			resultMap.put("resCode", 0);            resultMap.put("resMsg","兑换失败，请重试！");			return resultMap;		}		resultMap.put("resCode", 1);		resultMap.put("resMsg","兑换成功！");		return resultMap;	}		@RequestMapping(value = "validateMobilePhone")	@ResponseBody	public Map<String, Object> validateMobilePhone(@RequestParam(value = "mobileNumber", required = false) String mobileNumber) {		// 返回结果		Map<String, Object> resultMap = new HashMap<String, Object>();		try {			// 手机号码			if (mobileNumber == null) {				// 手机号码不符合规则				resultMap.put("resultCode", 'f');				resultMap.put("resultMsg", "手机号码不符合规则!");				return resultMap;			} else {				boolean b = SystemUtils.checkMobileNumber(mobileNumber);				if (!b) {					// 手机号码不符合规则					resultMap.put("resultCode", 'f');					resultMap.put("resultMsg", "手机号码不符合规则!");					return resultMap;				}else{					resultMap.put("resultCode", 't');					resultMap.put("resultMsg", "手机号码符合规则!");					return resultMap;				}			}		} catch (BusinessException e) {			logger.error(e.getMessage());			resultMap.put("resultCode", 'f');			resultMap.put("resultMsg", "系统错误，请重试!");			return resultMap;		}	}}