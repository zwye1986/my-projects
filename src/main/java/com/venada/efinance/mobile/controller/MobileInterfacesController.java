package com.venada.efinance.mobile.controller;import com.venada.efinance.business.*;import com.venada.efinance.common.controller.BaseController;import com.venada.efinance.common.exception.BusinessException;import com.venada.efinance.pojo.*;import com.venada.efinance.util.SystemUtils;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.encoding.Md5PasswordEncoder;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpServletRequest;import java.sql.Timestamp;import java.util.*;@Controllerpublic class MobileInterfacesController extends BaseController{	private static final Logger logger = LoggerFactory			.getLogger(MobileInterfacesController.class);	@Autowired	private UserBusiness userBusiness;	@Autowired	private UserDetailBusiness userDetailBusiness;	@Autowired	private Md5PasswordEncoder md5PasswordEncoder;	@Autowired	private SecurityQuestionBusiness securityQuestionBusiness;	@Autowired	private LoginBussiness loginBussiness;	@Autowired	private ValidateCodeBusiness validateCodeBusiness;	@Autowired	private CityBusiness cityBusiness;	@Autowired	private AreaBusiness areaBusiness;	@Autowired	private ProvinceBusiness provinceBusiness;	@Autowired	private AdvertisingBusiness advertisingBusiness;	@Autowired	private WithdrawalRecordBussiness withdrawalRecordBussiness;	@Autowired	private TransactionDetailsBusiness transactionDetailsBusiness;	@Autowired	private SecurityCenterBusiness securityCenterBusiness;		@ResponseBody	@RequestMapping(value = "/{mobileNumber}/doMobileRegist")	public Object doMobileRegist(@PathVariable String mobileNumber,			HttpServletRequest request) {		// 返回结果		Map<String, Object> resultMap = new HashMap<String, Object>();		try {			// 手机号码			if (mobileNumber == null) {				// 手机号码不符合规则				resultMap.put("resultCode", 'f');				resultMap.put("resultMsg", "手机号码不符合规则!");				return resultMap;			} else {				boolean b = SystemUtils.checkMobileNumber(mobileNumber);				if (!b) {					// 手机号码不符合规则					resultMap.put("resultCode", 'f');					resultMap.put("resultMsg", "手机号码不符合规则!");					return resultMap;				}			}			User user = userBusiness.findUserByMoblieNumber(mobileNumber);			if (user != null) {				resultMap.put("resultCode", 'f');				resultMap.put("resultMsg", "用户已经存在,不能重复注册!");				return resultMap;			} else {// 如果用户在e_user表中不存在				UserHis userHis = userBusiness						.findUserHisByMoblieNumber(mobileNumber);				// 判断用户是否在已销户用户表中是否存在。				if (userHis != null) {// 如果用户在已销户标中存在。中断当前流程。					request.getSession()							.setAttribute("hisNumber", mobileNumber);					resultMap.put("resultCode", 'h');					return resultMap;				}			}			List<ValidateCode> validateCodeList = validateCodeBusiness					.queryLastestCodeByMobileNumber(mobileNumber);			if (validateCodeList.size() > 0) {				ValidateCode validateCode = validateCodeList.get(0);				int crossTime = validateCodeBusiness						.queryCrossTimeById(validateCode.getId());				if (crossTime < 60) {					crossTime = 1;				} else {					crossTime = crossTime / 60 + 2;				}				resultMap.put("resultCode", 'f');				resultMap.put("resultMsg", "初始密码已通过短信发送给您手机,如果您未收到,请于"						+ crossTime + "分钟后重新注册！");				return resultMap;			}			// 随机生成用户初始密码，6位字符串，可能包含字符：23456789ABCDEFGHJKLMNPRSTUVWXYZ			String initPassword = SystemUtils.randomCheckcode("23456789ABCDEFGHJKLMNPRSTUVWXYZ",6);			String sms = "您已在[蛙宝网www.wowpower.cn]成功注册,初始密码为:" + initPassword					+ ",请尽快登录。";			validateCodeBusiness.sendSms(mobileNumber, sms, initPassword);			resultMap.put("resultCode", 's');			resultMap.put("resultMsg", "注册成功!");			return resultMap;		} catch (BusinessException e) {			logger.error(e.getMessage());			resultMap.put("resultCode", 'f');			resultMap.put("resultMsg", "系统错误，请重试!");			return resultMap;		}	}	@RequestMapping(value = "/{mobileNumber}/{password}/mobileLoginAuth")	@ResponseBody	public Object mobileLoginAuth(@PathVariable String mobileNumber,			@PathVariable String password, HttpServletRequest request) {		Map<String, Object> responseCode = new HashMap<String, Object>();		try {			User user = userBusiness.findUserByMoblieNumberAndPasswordNotCoded(					mobileNumber, password);			if (user == null) {				if(userBusiness.isFirstLogin(mobileNumber)){					Map<String, String> map = new HashMap<String, String>();					map.put("mobileNumber", mobileNumber);					map.put("password", password);					List<ValidateCode> validateCodes =	validateCodeBusiness.queryLastestCodeByMobileNumberAndEncodedPassword(map);					if(validateCodes == null || validateCodes.size() == 0){						responseCode.put("code", 102);						responseCode.put("msg", "手机号码或密码不正确！");						return responseCode;					}					return "{\"mobileNumber\":"+mobileNumber+",\"status\":0,\"id\":null,\"income\":null,\"nickName\":null,\"gender\":1,\"isMarried\":0,\"email\":null}";				}else{										responseCode.put("code", 101);					responseCode.put("msg", "帐户不存在！");					return responseCode;				}							}else{				LoginLog loginLog = new LoginLog();				loginLog.setId(UUID.randomUUID().toString());				loginLog.setIp(request.getRemoteAddr());				loginLog.setMobileNumber(user.getMobileNumber());				loginLog.setUserid(user.getId());				loginLog.setClient(2);				loginBussiness.setUserCredits(user, loginLog);				user.setPhoto(null);				boolean b = securityCenterBusiness.isOpen(user.getId());				if (b) {					user.setVipTag("1");				} else {					user.setVipTag("0");				}				return user;			}		} catch (BusinessException e) {			logger.error(e.getMessage());			responseCode.put("code", 100);			responseCode.put("msg", "系统错误，请重试!");			return responseCode;		}	}	@RequestMapping(value = "/mobileGetQuestions")	@ResponseBody	public Object mobileGetQuestions() {		return securityQuestionBusiness.getAll();	}	@RequestMapping(value = "/dealMobileSetNewPassword")	@ResponseBody	public Object dealMobileSetNewPassword(HttpServletRequest request) {		Map<String, Object> resultMap = new HashMap<String, Object>();		try {			String mobileNumber = request.getParameter("mobileNumber");			String nickName = request.getParameter("nickName");			String newPassword = request.getParameter("newPassword");			String questionId = request.getParameter("questionId");			String answer = request.getParameter("answer");			if (!userBusiness.isFirstLogin(mobileNumber)) {				resultMap.put("resCode", 101);				resultMap.put("resMsg", "您已经成功激活，无需再次激活！");				return resultMap;			}			if (nickName == null || "".equals(nickName.replaceAll("\\s*", ""))) {				resultMap.put("resCode", 102);				resultMap.put("resMsg", "请输入昵称！");				return resultMap;			} else {				nickName = nickName.replaceAll("\\s*", "");				if (!SystemUtils.checkName(nickName)) {					resultMap.put("resCode", 102);					resultMap.put("resMsg", "昵称不能包含特殊字符！");					return resultMap;				}			}			if (questionId == null					|| "".equals(questionId.replaceAll("\\s*", ""))) {				resultMap.put("resCode", 102);				resultMap.put("resMsg", "请设置安全问题！");				return resultMap;			} else {				questionId = questionId.replaceAll("\\s*", "");			}			if (answer == null || "".equals(answer.replaceAll("\\s*", ""))) {				resultMap.put("resCode", 102);				resultMap.put("resMsg", "请设置安全问题答案！");				return resultMap;			} else {				answer = answer.replaceAll("\\s*", "");			}			if (newPassword == null					|| "".equals(newPassword.replaceAll("\\s*", ""))) {				resultMap.put("resCode", 102);				resultMap.put("resMsg", "请输入新密码！");				return resultMap;			} else {				newPassword = newPassword.replaceAll("\\s*", "");			}			User user = new User();			user.setId(UUID.randomUUID().toString().toUpperCase());			user.setMobileNumber(mobileNumber);			user.setPassword(md5PasswordEncoder.encodePassword(newPassword,null));			user.setInviteCodeSelf(userBusiness.obtionInviteCode());			user.setNickName(nickName);			user.setStatus(1);			UserDetail userDetail = new UserDetail();			userDetail.setId(UUID.randomUUID().toString().toUpperCase());			userDetail.setUserid(user.getId());			userDetail.setMobileNumber(mobileNumber);			UserQuestion userQuestion = new UserQuestion();			userQuestion.setId(UUID.randomUUID().toString());			userQuestion.setUserid(user.getId());			userQuestion.setQuestionId(questionId);			userQuestion.setAnswer(answer);			userBusiness.addUser(user, userDetail, userQuestion);			resultMap.put("resCode", 100);			resultMap.put("resMsg", "激活成功！");			return resultMap;		} catch (BusinessException e) {			logger.error(e.getMessage());		}		return resultMap;	}	@RequestMapping(value = "/{mobileNumber}/{oldPassword}/{newPassword}/resetPassword")	@ResponseBody	public Object resetPassword(@PathVariable String mobileNumber,			@PathVariable String oldPassword, @PathVariable String newPassword) {        User user = userBusiness.findUserByMoblieNumberAndPasswordNotCoded(                mobileNumber, oldPassword);        Map<String, Object> responseCode = new HashMap<String, Object>();        if (user == null) {            responseCode.put("code", 101);            responseCode.put("msg", "用户名或者密码不正确！");        } else {            userBusiness.updateUserPassword(user.getId(), newPassword);            responseCode.put("code", 100);            responseCode.put("msg", "修改密码成功");        }        return responseCode;    }    @RequestMapping(value = "/modifyUserForAndroid")    @ResponseBody    public Object modifyUserForAndroid(HttpServletRequest request) {        Map<String, Object> responseCode = new HashMap<String, Object>();        String mobileNumber = request.getParameter("mobileNumber");        String password = request.getParameter("password");        try {            User user = userBusiness.findUserByMoblieNumberAndPasswordNotCoded(                    mobileNumber, password);            UserDetail userDetail = userDetailBusiness                    .findUserDetailByMoblieNumber(mobileNumber);            if (user == null) {                responseCode.put("code", 101);                responseCode.put("msg", "用户名或者密码不正确！");            } else {                user.setModifyTime(new Date());                String name = request.getParameter("name");                if (name != null && !"".equals(name.replaceAll("\\s*", ""))) {                    user.setName(name);                }                String nickName = request.getParameter("nickName");                if (nickName != null && !"".equals(nickName.replaceAll("\\s*", ""))) {                    user.setNickName(nickName);                }                String email = request.getParameter("email");                if (email != null && !"".equals(email.replaceAll("\\s*", ""))) {                    userDetail.setEmail(email);                }                String gender = request.getParameter("gender");                if (StringUtils.isNumeric(gender)) {                    userDetail.setGender(Integer.parseInt(gender));                }                String idCard = request.getParameter("idCard");                if (idCard != null && !"".equals(idCard.replaceAll("\\s*", ""))) {                    userDetail.setIdCard(idCard);                }                String isMarried = request.getParameter("isMarried");                if (StringUtils.isNumeric(isMarried)) {                    userDetail.setIsMarried(Integer.parseInt(isMarried));                }                String qq = request.getParameter("qq");                if (StringUtils.isNumeric(qq)) {                    userDetail.setQq(qq);                }                String eduLevel = request.getParameter("eduLevel");                if(StringUtils.isNumeric(eduLevel)){                    userDetail.setEduLevel(Integer.parseInt(eduLevel));                }                String liveProvince = request.getParameter("liveProvince");                if(StringUtils.isNumeric(liveProvince)){                    userDetail.setLiveProvince(Integer.parseInt(liveProvince));                }                String liveCity = request.getParameter("liveCity");                if(StringUtils.isNumeric(liveCity)){                    userDetail.setLiveCity(Integer.parseInt(liveCity));                }                String liveArea = request.getParameter("liveArea");                if(StringUtils.isNumeric(liveArea)){                    userDetail.setLiveArea(Integer.parseInt(liveArea));                }                String address = request.getParameter("address");                if(address != null && !"".equals(address.replaceAll("\\s*", ""))){                    userDetail.setAddress(address);                }                String graduated = request.getParameter("graduated");                if(graduated != null && !"".equals(graduated.replaceAll("\\s*", ""))){                    userDetail.setGraduated(graduated);                }                String birthday = request.getParameter("birthday");                if(birthday != null && !"".equals(birthday.replaceAll("\\s*", ""))){                    Timestamp timestamp = new Timestamp(Long.parseLong(birthday));                    userDetail.setBirthday(timestamp);                }                userDetail.setModifyTime(new Date());                userBusiness.updateUserByMobileNumber(user);                userDetailBusiness.updateUserDetailByMobileNumber(userDetail);                responseCode.put("code", 100);                responseCode.put("msg", "操作成功！");            }        } catch (BusinessException e) {            logger.error(e.getMessage());            responseCode.put("code", 101);            responseCode.put("msg", "操作失败！");        }        return responseCode;    }		@ResponseBody	@RequestMapping(value = "/{provinceid}/getCityJson", method = { RequestMethod.POST,RequestMethod.GET })	public Object getCityJson(@PathVariable Integer  provinceid) {		List<City> cities = null;		try {			cities = cityBusiness.findCityListByProvinceid(provinceid);		} catch (NumberFormatException e) {			logger.error(e.getMessage());		}		return cities;	}	@ResponseBody	@RequestMapping(value = "/{cityid}/getAreaJson", method = {			RequestMethod.GET, RequestMethod.POST })	public Object getAreaJson(@PathVariable int cityid) {		List<Area> area = null;		try {			area = areaBusiness.findAreaListByCityid(cityid);		} catch (NumberFormatException e) {			logger.error(e.getMessage());		}		return area;	}		@ResponseBody	@RequestMapping(value = "/findAllProvinceList", method = {			RequestMethod.GET, RequestMethod.POST })	public Object findAllProvinceList() {		return  provinceBusiness.findAllProvinceList();	}			@ResponseBody	@RequestMapping(value="modifyUserInfo")	public Object modifyUserInfo(HttpServletRequest request){	    String info=request.getParameter("info");		Map<String, Object> responseCode = new HashMap<String, Object>();		try {			User user = SystemUtils.toBean(info, User.class);						User _user = userBusiness.findUserByMoblieNumber(user.getMobileNumber());			if(!user.getPassword().equals(_user.getPassword())){				responseCode.put("resCode", "101");				responseCode.put("resMsg", "操作失败，用户密码认证失败！");			}else{				UserDetail userDetail = new UserDetail();				userDetail.setIdCard(user.getIdCard());				userDetail.setIsMarried(user.getIsMarried());				userDetail.setEmail(user.getEmail());				userDetail.setGender(user.getGender());				userDetail.setAddress(user.getAddress());				userDetail.setBirthday(user.getBirthday());				userDetail.setEduLevel(user.getEduLevel());				userDetail.setGraduated(user.getGraduated());				userDetail.setMobileNumber(user.getMobileNumber());				userDetail.setLiveProvince(user.getLiveProvince());				userDetail.setLiveCity(user.getLiveCity());				userDetail.setLiveArea(user.getLiveArea());				userDetail.setQq(user.getQq());								userBusiness.updateUserInfoMobileNumber(user,userDetail);				responseCode.put("resCode", "100");				responseCode.put("resMsg", "修改信息成功！");			}								} catch (Exception e) {			logger.error("json转成user对象出错："+e.getMessage());			responseCode.put("resCode", "101");			responseCode.put("resMsg", "操作失败，系统异常！");		}				return responseCode;	}	@RequestMapping(value="getAndroidAdvertiseImg")	public @ResponseBody Object getAndroidAdvertiseImg(HttpServletRequest request){		List<Advertising> list = advertisingBusiness.getAdvertiseByType(2);		String[] resArray = new String[list.size()];		int c = 0;		for(Advertising a : list){			String url = a.getId()+"/getAdvertiseImg";			resArray[c] = url;			c++;		}		return resArray;	}}