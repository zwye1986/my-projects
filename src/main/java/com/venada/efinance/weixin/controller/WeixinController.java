package com.venada.efinance.weixin.controller;import com.venada.efinance.business.*;import com.venada.efinance.common.exception.BusinessException;import com.venada.efinance.pojo.User;import com.venada.efinance.pojo.WeixinDesposit;import com.venada.efinance.pojo.WeixinUser;import com.venada.efinance.servlet.TokenThread;import com.venada.efinance.weixin.common.util.AdvancedUtil;import com.venada.efinance.weixin.common.util.DesUtil;import com.venada.efinance.weixin.common.util.SignUtil;import com.venada.efinance.weixin.service.CoreService;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;import java.io.UnsupportedEncodingException;import java.net.URLDecoder;import java.util.*;@Controller@RequestMapping(value = "/weixin")public class WeixinController {	private static Logger log = LoggerFactory.getLogger(WeixinController.class);	@Autowired	private WeixinUserBusiness weixinUserBusinessImpl;	@Autowired	private UserBusiness userBusiness;	@Autowired	private CoreService coreService;	@Autowired	private UserWalletBusiness userWalletBusinessImpl;	@Autowired	private UserSignInBusiness userSignInBusinessImpl;	@Autowired	private InviteBenefitBusiness inviteBenefitBusinessImp;	@Autowired	private UserWalletBusiness userWalletBusiness;	@Autowired	private DealDetailBusiness dealDetailBusiness;	@Autowired	private GameBusiness gameBusinessImpl;		@ResponseBody	@RequestMapping(value = "/weixinCheckSignature", method = RequestMethod.GET)	public String weixinCheckSignature(Model model, HttpServletRequest request) {		// 微信加密签名		String signature = request.getParameter("signature");		// 时间戳		String timestamp = request.getParameter("timestamp");		// 随机数		String nonce = request.getParameter("nonce");		// 随机字符串		String echostr = request.getParameter("echostr");		// 请求校验，若校验成功则原样返回echostr，表示接入成功，否则接入失败		if (SignUtil.checkSignature(signature, timestamp, nonce)) {			return echostr;		} else {			return "";		}	}	@RequestMapping(value = "/weixinCheckSignature", method = RequestMethod.POST)	@ResponseBody	public void weixinCheckSignature2(Model model, HttpServletRequest request,			HttpServletResponse response) {		try {			request.setCharacterEncoding("UTF-8");			response.setCharacterEncoding("UTF-8");		} catch (UnsupportedEncodingException e1) {			// TODO Auto-generated catch block			e1.printStackTrace();		}		// 调用核心业务类接收消息、处理消息		String respXml = coreService.processRequest(request);		// 响应消息		PrintWriter out;		try {			out = response.getWriter();			out.print(respXml);			out.close();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	@RequestMapping(value = "/bundling")	public String bundling(HttpServletRequest request,			HttpServletResponse response, Model model) {		String openid = request.getParameter("openid");		log.info("openid="+openid);		if (null == openid || openid.equals("")) {			model.addAttribute("openiderror", "网络异常");		} else {			model.addAttribute("openid", openid);		}		return "bundling";	}				@SuppressWarnings("deprecation")	@RequestMapping(value = "/bundlingUser")	@ResponseBody	public Map<String, Object> bundlingUser(HttpServletRequest request,			HttpServletResponse response, Model model) {		Map<String, Object> result = new HashMap<String, Object>();		String openid;		try {			openid = URLDecoder.decode(DesUtil.decrypt(request					.getParameter("openid")));			log.info("openid:"+openid);			// 蛙宝账号			String id = request.getParameter("id");			// 蛙宝账号密码			String password = request.getParameter("password");			if (weixinUserBusinessImpl.isOAuth(openid)) {				result.put("msg", "微信账号已绑定蛙宝账号!");			} else {				if (userBusiness.validateLogin(id, password)) {// 判断账号和密码是否正确					WeixinUser u = new WeixinUser();					User user=userBusiness.findUserByMoblieNumber(id);					u.setId(UUID.randomUUID().toString());					u.setOpenid(openid);					u.setCreatetime(new Date());					u.setUserid(user.getId());					weixinUserBusinessImpl.addWeixinUser(u);					AdvancedUtil.sendCustomMessage(TokenThread.accessToken.getAccessToken(), AdvancedUtil.makeTextCustomMessage(openid,"您的蛙宝账号"+user.getNickName()+"绑定微信成功!"));					result.put("msg", "绑定成功!");				} else {					result.put("msg", "蛙宝账号或密码错误!");				}			}		} catch (BusinessException e) {			result.put("msg", "用户数据异常!");		} catch (IOException e) {			result.put("msg", "错误的openid!");		} catch (Exception e) {			// TODO Auto-generated catch block			result.put("msg", "错误的openid!");		}		return result;	}		@RequestMapping(value = "/bundlingWeixin")	public String bundlingWeixin(HttpServletRequest request,			HttpServletResponse response, Model model) {		return "/weixin/index";	}		@RequestMapping(value = "/signWeixin")	public String signWeixin(HttpServletRequest request,			HttpServletResponse response, Model model) {		Map<String, Object> result = new HashMap<String, Object>();		String openid="";		try {			if(request.getParameter("openid")!=null){				openid = URLDecoder.decode(DesUtil.decrypt(request						.getParameter("openid")));				result=issignIn(openid);				model.addAttribute("result", result);				model.addAttribute("openid",openid);			}					} catch (IOException e) {			e.printStackTrace();		} catch (Exception e) {			e.printStackTrace();		}				return "/weixin/sign";	}				@RequestMapping(value = "/weixinDesposit")	public String weixinDesposit(HttpServletRequest request,			HttpServletResponse response, Model model) {		List<WeixinDesposit> list=new ArrayList<WeixinDesposit>();		String openid="";		try {			if(request.getParameter("openid")!=null){				openid = URLDecoder.decode(DesUtil.decrypt(request						.getParameter("openid")));				list=coreService.getWeixinDespositByOpenid(openid);				model.addAttribute("list", list);				model.addAttribute("openid",openid);			}					} catch (IOException e) {			e.printStackTrace();		} catch (Exception e) {			e.printStackTrace();		}				return "/weixin/weixinDesposit";	}				/**	 * 根据openid获取蛙宝用户信息	 * @param openid	 * @return	 */	@RequestMapping(value="/getOpenid/{openid}",method = { RequestMethod.GET })	@ResponseBody	public Map<String, Object>  getUserInfoByMobilePhone(@PathVariable String openid) {		Map<String, Object> result = new HashMap<String, Object>();		WeixinUser weixinUser=weixinUserBusinessImpl.getWeixinUserOpenid(openid);		String userid="";		if(weixinUser!=null&&!weixinUser.equals("")){			userid=weixinUser.getUserid();		}		User user = userBusiness.findUserById(userid);		if (user == null) {			result.put("resCode", 100);			result.put("resMsg", "用户不存在");			return result;		} else {			// 账户余额			result.put("walletAmount",					userWalletBusiness.getAmountByUserId(user.getId())							.getAmount());			// 账户收入			result.put("dealDetailAmount", dealDetailBusiness					.getDealDetailAmountByUserId(user.getId()));			// 预计收入			Map<String, Object> condition = new HashMap<String, Object>();			condition.put("userid", user.getMobileNumber());			result.put("gameBenefit",					gameBusinessImpl.getUserGameBenefitInfo(condition)							.getReward());			// 用户当前投资金额（押金）			result.put("gameDeposit",					gameBusinessImpl.getUserGameBenefitInfo(condition)							.getDeposit());			// 查询推荐奖励			condition.clear();			condition.put("inviteUserId", user.getId());			result.put("total",					inviteBenefitBusinessImp.getInviteBenefitTotal(condition));			// 查询签到奖励			condition.clear();			condition.put("mobilePhone", user.getMobileNumber());			result.put("signTotal", userSignInBusinessImpl					.sumSignBenefitByMobileNumber(condition));		}		return result;	}	/**	 * 用户签到 并发送微信	 * @param model	 * @return	 */	@RequestMapping(value = "/{openid}/signIn", method = {			RequestMethod.GET, RequestMethod.POST })	@ResponseBody	public synchronized Map<String, Object> userSignInToday(@PathVariable String openid) {		Map<String, Object> result = new HashMap<String, Object>();		result=coreService.signInByOpenid(openid);		AdvancedUtil.sendCustomMessage(TokenThread.accessToken.getAccessToken(), AdvancedUtil.makeTextCustomMessage(openid,result.get("msg").toString()));		return result;	}		/**	 * 判断用户今天是否已经签到	 * 	 * @param model	 * @return	 */	@RequestMapping(value = "/{openid}/issignIn", method = {			RequestMethod.GET, RequestMethod.POST })	@ResponseBody	public Map<String, Object> issignIn(@PathVariable String openid) {		Map<String, Object> result = new HashMap<String, Object>();		User user = coreService.getUserByOpenid(openid);		if (user == null) {			result.put("errorcode", "1");			result.put("errormsg", "用户不存在");			return result;		} else {			Map<String, Object> isSignInResult = userSignInBusinessImpl					.isSignIn(user, 0);			boolean flag = Boolean.valueOf(isSignInResult.get("flag")					.toString());			if (flag) {				result.put("flag", "havesignIn");				result.put("msg", "您今日已经签到!");			} else {				result.put("flag", "notsignIn");				result.put("msg", "未签到!");			}		}		return result;	}	}