<?xml version="1.0" encoding="UTF-8"?><databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">	<changeSet id="modifyEcUserGameRelation" author="xupei">		<addColumn tableName="ec_user_game_relation">			<column name="policy_clicks" type="int(11)"></column>			<column name="policy_reward" type="int(11)"></column>			<column name="policy_punish" type="int(11)"></column>			<column name="policy_deposit" type="int(11)"></column>		</addColumn>		<createTable tableName="ec_lprecord">			<column name="id" type="varchar(255)">				<constraints primaryKey="true" nullable="false" />			</column>			<column name="userid" type="varchar(255)">				<constraints nullable="true" />			</column>			<column name="category" type="int(11)">				<constraints nullable="true" />			</column>			<column name="addtime" type="datetime">				<constraints nullable="true" />			</column>		</createTable>				<sql>			DROP PROCEDURE IF EXISTS transfer_user;	    </sql>		<createProcedure>			CREATE PROCEDURE transfer_user()			BEGIN			declare			fetchSeqOk boolean;			declare nowtime datetime;			declare uuidnum			VARCHAR(255);			declare _userid varchar(255);			declare cur1 CURSOR FOR			select id from ec_user where activeReward=1 ;			declare continue handler			for NOT FOUND set fetchSeqOk = true;			set fetchSeqOk = false;			SET			nowtime=NOW();			open cur1;			fetchSeqLoop:Loop			FETCH cur1 INTO _userid;			if			fetchSeqOk then			leave fetchSeqLoop;			else			select uuid() into uuidnum;			insert into ec_lprecord values (uuidnum,_userid,1,'2013-09-13			23:00:00');			end if;			end Loop;			close cur1;			end		</createProcedure>		<sql>			call transfer_user();		</sql>	</changeSet>	<changeSet id="modifyForRankOrder" author="zhangwenyun">		<sql>			DROP EVENT IF EXISTS GENERATE_TOP_ACTIVE;		</sql>		<sql>			DROP EVENT IF EXISTS GENERATE_TOP_INCOME;		</sql>		<sql>			DROP EVENT IF EXISTS GENERATE_TOP_WEALTH;		</sql>		<sql>			DROP EVENT IF EXISTS GENERATE_TOP_LEVEL;		</sql>		<sql>			DROP EVENT IF EXISTS DELETE_INVALID_CODE;		</sql>		<createProcedure>			CREATE EVENT GENERATE_TOP_ACTIVE ON SCHEDULE EVERY 30			MINUTE ON COMPLETION			NOT PRESERVE ENABLE DO begin			TRUNCATE TABLE			ec_top_active;			insert into ec_top_active select			u.id,u.mobileNumber,u.nickName,count(*),now()			from ec_user			u,ec_login_log g			where u.id = g.userid and u.status = 1 group by			g.userid order by count(*) desc ,u.createTime limit 0,100;			end;		</createProcedure>		<createProcedure>			CREATE EVENT GENERATE_TOP_INCOME ON SCHEDULE EVERY 30			MINUTE ON COMPLETION			NOT PRESERVE ENABLE DO begin			TRUNCATE TABLE			ec_top_income;			insert into			ec_top_income			select			b.id,b.mobileNumber,b.nickName,b.amount ,now()			from (			select			u.id,u.mobileNumber,u.nickName,sum(d.amount) as amount ,u.createTime			from ec_user u,ec_deal_detail d			where u.id = d.userid and d.detailType			= 2 and d.status = 0 and u.status =			1 group by d.userid ) b			where			b.amount > 0 order by b.amount desc,b.createTime limit 0,100;			end;		</createProcedure>		<createProcedure>			CREATE EVENT GENERATE_TOP_WEALTH ON SCHEDULE EVERY 30			MINUTE ON COMPLETION			NOT PRESERVE ENABLE DO begin			TRUNCATE TABLE			ec_top_wealth;			insert into			ec_top_wealth			select			u.id,u.mobileNumber,u.nickName,w.amount ,now()			from ec_user u ,			ec_user_wallet w where u.id = w.userid and u.status =			1 and w.amount >			0 order by w.amount desc,u.createTime limit			0, 100;			end;		</createProcedure>		<createProcedure>			CREATE EVENT GENERATE_TOP_LEVEL ON SCHEDULE EVERY 30			MINUTE ON COMPLETION			NOT PRESERVE ENABLE DO begin			TRUNCATE TABLE			ec_top_level;			insert into ec_top_level			select			u.id,u.mobileNumber,u.nickName,u.level ,now() from ec_user u where			u.status = 1			order by u.level desc,u.createTime limit 0,100;			end;		</createProcedure>		<createProcedure>		<![CDATA[ 			CREATE EVENT DELETE_INVALID_CODE ON SCHEDULE EVERY 15 MINUTE ON COMPLETION			NOT PRESERVE ENABLE DO begin			delete from ec_validate_code where invalidTime < now();			end;			]]>		</createProcedure>	</changeSet>	<changeSet id="events" author="xupei">		<sql>			DROP PROCEDURE IF EXISTS proc_gameop;			DROP view IF EXISTS ec_play_num_view;			DROP view IF EXISTS ec_user_game_job_view;		</sql>		<createView viewName="ec_play_num_view">	      <![CDATA[select c.relationid AS relationid,count(1) AS playnum from ec_game_log c group by c.relationid]]>	    </createView>		<createView viewName="ec_user_game_job_view">	      <![CDATA[             select a.createTime,a.userid AS userid,a.id AS id,a.invalidtime AS invalidtime,coalesce(d.playnum,0) AS playnum,a.policy_clicks AS clicks,a.policy_deposit AS deposit,a.policy_punish AS punish,a.policy_reward AS reward,f.gamename from ((ec_user_game_relation a left join ec_play_num_view d on((a.id = d.relationid))) ) left join ec_game f on a.gameid = f.id where (a.status = 1)           ]]>	    </createView>		<createProcedure>			CREATE PROCEDURE proc_gameop()			BEGIN            declare _createtime datetime;			declare _mobilenumber varchar(255);			declare _id varchar(255);			declare _invalidtime datetime;			DECLARE _playnum int;			DECLARE _clicks int;			DECLARE _deposit int;			DECLARE _punish int;			DECLARE _reward double;            DECLARE _gamename VARCHAR(255);			declare fetchSeqOk boolean;			DECLARE nowtime datetime;			declare serialNumber VARCHAR(255);			declare randNumber VARCHAR(255);			declare uuidnum VARCHAR(255);			declare _userid varchar(255);			declare _banance decimal(16,4);			declare cur1 CURSOR FOR select * from ec_user_game_job_view ;			declare continue handler for NOT FOUND set fetchSeqOk = true;			set fetchSeqOk = false;			SET nowtime=NOW();            insert ec_event_log values(now());			open cur1;			fetchSeqLoop:Loop			FETCH cur1 INTO			_createtime,_mobilenumber,_id,_invalidtime,_playnum,_clicks,_deposit,_punish,_reward,_gamename;			if fetchSeqOk then			leave fetchSeqLoop;			else			if  nowtime > _invalidtime THEN			select id from ec_user where mobilenumber =_mobilenumber into _userid;			select date_format(now(),'%Y%m%d%H%i%s') into serialNumber;			select round(rand()*10000) into randNumber;			set serialNumber = serialNumber+randNumber;			select uuid() into uuidnum;                          update ec_user_wallet set amount = amount + _deposit where userid = _userid;			/*插入返回用户押金流水记录			*/			insert into ec_deal_detail			(id,serialNumber,datetime,status,amount,balance,userid,description,detailtype,type)values(uuidnum,CONCAT('Y',serialNumber),now(),0,_deposit,_banance,_userid,CONCAT('返还用户押金，游戏名称为',_gamename),5,1);                                    if _playnum >= _clicks then                               			update ec_user_game_relation set reward = _reward,status = 2 where id =			_id;			update ec_user_wallet set amount = amount + _reward where userid = _userid;			select amount from ec_user_wallet where userid = _userid into			_banance;			/*获得返利			*/                       /* set serialNumber = 'G'+serialNumber;*/			select uuid() into uuidnum;			insert into ec_deal_detail			(id,serialNumber,datetime,status,amount,balance,userid,description,detailtype,type)values(uuidnum,CONCAT('G',serialNumber),now(),0,_reward,_banance,_userid,CONCAT('用户获取返利，游戏名称为',_gamename),2,1);                       			ELSE			update ec_user_game_relation set punish = _punish,status = 2 where id =			_id;			update ec_user_wallet set amount = amount - _punish where userid = _userid;			/*扣去惩罚金			*/			select uuid() into uuidnum;             /*     set serialNumber = 'P'+serialNumber;*/			insert into ec_deal_detail			(id,serialNumber,datetime,status,amount,balance,userid,description,detailtype,type)values(uuidnum,CONCAT('P',serialNumber),now(),0,_punish,_banance,_userid,CONCAT('扣去用户惩罚金，游戏名称为',_gamename),8,2);			end if;			end if;			end if;			end Loop;			close cur1;			end		</createProcedure>		<sql>			DROP EVENT IF EXISTS GAME_EVENT;		</sql>		<createProcedure>			CREATE EVENT GAME_EVENT ON SCHEDULE EVERY 1 DAY			STARTS '2013-06-25			00:00:00' ON COMPLETION			NOT PRESERVE ENABLE DO			call			proc_gameop();		</createProcedure>	</changeSet></databaseChangeLog>